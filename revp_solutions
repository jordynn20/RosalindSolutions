##Given: A DNA string of length at most 1 kbp in FASTA format.

##Return: The position and length of every reverse palindrome in the string having length between 4 and 12. You may return these pairs in any order.

# Read the FASTA file
with open('rosalind_revp.txt', 'r') as file:
    fasta_file = file.read()

# Function to parse FASTA format (same as previous problems)
def fasta_split(fastas):
    seq = {}
    label = ''
    for line in fastas.strip().split('\n'):
        if line.startswith('>'):
            label = line[1:]
            seq[label] = ''
        else:
            seq[label] += line.strip()
    return seq

# Reverse complement function
def reverse_complement(seq):
    complement = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}
    return ''.join(complement[base] for base in seq[::-1] if base in complement)

# Finding palindromes of the reverse function previous
def palindrome(seq):
    results = []
    for i in range(len(seq)):
        for length in range(4, 13):  # palindromes of length 4 to 12
            if i + length > len(seq):
                continue
            substring = seq[i:i+length]
            if substring == reverse_complement(substring) and len(substring) == length:
                results.append((i + 1, length))  # 1-based indexing for Rosalind output
    return results

# Example sequence
sequences = fasta_split(fasta_file)
palindromes = palindrome(seq)
for start, length in palindromes:
    print(start, length)
